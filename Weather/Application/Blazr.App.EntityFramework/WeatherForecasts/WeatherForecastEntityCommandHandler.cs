/// ============================================================
/// Author: Shaun Curtis, Cold Elm Coders
/// License: Use And Donate
/// If you use it, donate something to a charity somewhere
/// ============================================================
namespace Blazr.App.EntityFramework;

/// <summary>
/// Mediator Handler for executing commands against a WeatherForecast Entity in an Entity Framework Context
/// </summary>
public sealed record WeatherForecastEntityCommandHandler : IRequestHandler<WeatherForecastEntityCommandRequest, Result<WeatherForecastId>>
{
    private readonly IMessageBus _messageBus;
    private readonly IDbContextFactory<InMemoryWeatherTestDbContext> _factory;

    public WeatherForecastEntityCommandHandler(IDbContextFactory<InMemoryWeatherTestDbContext> factory, IMessageBus messageBus)
    {
        _factory = factory;
        _messageBus = messageBus;
    }

    public Task<Result<WeatherForecastId>> HandleAsync(WeatherForecastEntityCommandRequest request, CancellationToken cancellationToken)
        => _factory.CreateDbContext()
            // update the record in the data store
            //And if the result is successful, publish the WeatherForecastId to the message bus
            // and return the Id - this may have been generated by the database and therefore unknown to the caller
            .ExecuteCommandAsync<DboWeatherForecast>(new CommandRequest<DboWeatherForecast>(
                Item: WeatherForecastMap.Map(request.Item.WeatherForecastRecord.Record),
                State: request.Item.WeatherForecastRecord.State),
                cancellationToken)
            .ApplyTransformAsync( record => Result<WeatherForecastId>.Success(new WeatherForecastId(record.WeatherForecastID))                )
            .ApplySideEffectAsync((id) => _messageBus.Publish<DmoWeatherForecast>(id));
}
