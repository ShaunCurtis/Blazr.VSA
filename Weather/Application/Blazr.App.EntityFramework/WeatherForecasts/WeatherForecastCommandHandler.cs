/// ============================================================
/// Author: Shaun Curtis, Cold Elm Coders
/// License: Use And Donate
/// If you use it, donate something to a charity somewhere
/// ============================================================
namespace Blazr.App.EntityFramework;

/// <summary>
/// Mediator Handler for executing commands against a WeatherForecast Entity in an Entity Framework Context
/// </summary>
public sealed record WeatherForecastCommandHandler : IRequestHandler<WeatherForecastCommandRequest, Result<WeatherForecastId>>
{
    private readonly IMessageBus _messageBus;
    private readonly IDbContextFactory<InMemoryWeatherTestDbContext> _factory;

    public WeatherForecastCommandHandler(IDbContextFactory<InMemoryWeatherTestDbContext> factory, IMessageBus messageBus)
    {
        _factory = factory;
        _messageBus = messageBus;
    }

    public Task<Result<WeatherForecastId>> HandleAsync(WeatherForecastCommandRequest request, CancellationToken cancellationToken)
        => _factory.CreateDbContext()
            // Get the record result
            // and if the result is successful, we publish the DmoWeatherForecast to the message bus
            // and return the Id - this may have been generated by the database
            .ExecuteCommandAsync<DboWeatherForecast>(new CommandRequest<DboWeatherForecast>(
                    Item: DboWeatherForecast.Map(request.Item.Record),
                    State: request.Item.State
                ),
                cancellationToken)
            .ExecuteFunctionAsync((record) => Result<WeatherForecastId>
               .Create(new WeatherForecastId(record.WeatherForecastID))
            )
            .OutputAsync((id) => _messageBus.Publish<DmoWeatherForecast>(id));
    
}
