@namespace Blazr.App.UI

@inject IToastService ToastService
@inject InvoiceItemEditPresenterFactory InvoiceItemPresenterFactory
@inject NavigationManager NavManager

<PageTitle>@_formTitle</PageTitle>

<div class="d-flex flex-row mb-4 pt-1 pb-2 border-bottom">
    <div class="flex-fill justify-content-start h4">
        @_formTitle
    </div>
    <div class="justify-content-end">
        @* Header Buttons *@
    </div>
</div>

<EditForm EditContext=this.Presenter.EditContext OnValidSubmit="this.OnSaveAsync">

    <Blazr.FluentValidation.BlazrFluentValidator TRecord="DmoInvoiceItemEditContext" TValidator="DmoInvoiceItemEditContextValidator" />
    <BlazrEditStateTracker />

    <div class="row">

        <BlazrTextControl UpdateOnInput
        class="form-control mb-2"
        ColumnCss="col-12 col-md-8 mb-2"
        Label="Description"
        @bind-Value="this.Presenter.RecordEditContext.Description" />

        <BlazrNumberControl UpdateOnInput
        class="form-control mb-2"
        ColumnCss="col-12 col-md-8 mb-2"
        Label="Amount £"
        @bind-Value="this.Presenter.RecordEditContext.Amount" />

    </div>

    <EditFormButtons SaveOnSubmit
    ColumnCss="col-12 mb-3 text-end"
    Options=_editFormButtonsOptions
    DirtyExit=this.OnExit
    Exit=this.OnExit
    Save=this.OnSaveAsync
    IsNewRecord=_isNewRecord />

</EditForm>

@code {
    [CascadingParameter] private IModalDialog? ModalDialog { get; set; }
    [Parameter, EditorRequired] public InvoiceItemId Uid { get; set; } = default!;

    private EditFormButtonsOptions _editFormButtonsOptions = new()
    {
         UpdateText = "Update Item",
          SaveText = "Process Item"
         
    };

    private bool _isNewRecord => this.Presenter.IsNew;

    private InvoiceItemEditPresenter Presenter = default!;
    private string _exitUrl = "/";
    private string _formTitle = "Invoice Item Editor";
    private bool _isDirty;
    private bool _isClean => !_isDirty;
    private bool _stateStoreAttached;
    private BlazrEditStateStore? _store;

    protected override void OnInitialized()
    {
        this.Presenter = this.InvoiceItemPresenterFactory.GetPresenter(this.Uid);
        
        if (!this.Presenter.IsNew)
            this.Presenter.EditContext.Validate();
    }

    protected override void OnParametersSet()
    {
        _isDirty = this.Presenter.EditContext.GetEditState();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // The EditContext is only created after the first render.
        // We need to make sure the StateStore has been attached to the EditContext
        // before we try and get it.
        // The only place we can do this is in the second OnAfterRender UI event
        _store = _store ?? this.Presenter.EditContext.GetStateStore();
        if (_store is not null && !_stateStoreAttached)
        {
            _store.StoreUpdated += OnEditStateMayHaveChanged;
            _stateStoreAttached = true;
        }
    }

    private void OnEditStateMayHaveChanged(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    private async Task OnSaveAsync()
    {
        if (!this.Presenter.EditContext.Validate())
        {
            this.ToastService.ShowError("The record data is not valid.  Fix the highlighted errors.");
            return;
        }

        await this.Presenter.ProcessItemAsync();

        if (this.Presenter.LastResult.Successful)
            ModalDialog?.Close(ModalResult.OK());
    }

    private Task OnExit()
    {
        if (this.ModalDialog is null)
            this.NavManager.NavigateTo(_exitUrl);

        ModalDialog?.Close(ModalResult.Exit());
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        this.Presenter.EditContext.OnFieldChanged -= OnEditStateMayHaveChanged;
    }
}