@namespace Blazr.App.UI

<h3>InvoiceDashboard</h3>
@inject NavigationManager NavManager
@inject IToastService ToastService
@inject InvoiceEntityMutor Mutor
@inject IMessageBus MessageBus

@implements IDisposable

<PageTitle>Invoice Dashboard</PageTitle>

@if (_loading)
{
    <div class="text-center">
        <div class="spinner-border" style="width: 5rem; height: 5rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    return;
}

<div hidden="@_isClean">
    <div class="alert alert-danger d-flex align-items-center my-2 p-2" role="alert">
        @_message
    </div>
</div>

<div hidden="@_isNew">

    <div class="d-flex flex-row mb-2 pt-1 border-bottom">

        <div class="flex-fill justify-content-start h4">
            Invoice Manager
        </div>

        <div class="justify-content-end">

            <button class="btn btn-sm btn-primary ms-1" @onclick="this.EditAsync">Edit Invoice Data</button>
            <button hidden="@_isClean" class="btn btn-sm btn-success ms-1" @onclick="this.SaveAsync">Save Invoice</button>
            <button hidden="@_isClean" class="btn btn-sm btn-success ms-1" @onclick="this.SaveAndExitAsync">Save And Exit</button>
            <button hidden="@_isClean" class="btn btn-sm btn-danger ms-1" @onclick="this.ExitWithoutSavingAsync">Exit Without Saving</button>
            <button hidden="@_isDirty" class="btn btn-sm btn-dark ms-1" @onclick="this.ExitAsync">Exit</button>

        </div>

    </div>
</div>

@if (_isNew)
{
    <div>
        <InvoiceAddForm />
    </div>
}
else
{
    <div>
        <InvoiceViewer />
    </div>

    <div hidden="@_isNew" class="mt-3">
        <InvoiceItemGridForm />
    </div>
}

<NavigationLock OnBeforeInternalNavigation="this.OnLocationChanging" ConfirmExternalNavigation="_isDirty" />

<BsModalDialog @ref=_modalDialog />

@code {
    [Parameter] public InvoiceId InvoiceId { get; set; } = InvoiceId.Default;

    private bool _loading = true;
    private bool _isError = false;
    private IModalDialog _modalDialog = default!;

    private bool _isDirty => this.Mutor.IsDirty;

    private bool _isClean => !this.Mutor.IsDirty;

    private bool _isNew => this.Mutor.IsNew;

    private string _message => _isError ? this.Mutor.LastResult.Exception?.Message ?? "Unspecified Error" : "Invoice changes are not currently saved to the data store!";

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        return base.SetParametersAsync(parameters);
    }

    protected async override Task OnInitializedAsync()
    {
        await this.Mutor.LoadAsync(this.InvoiceId);
        _loading = false;
        this.MessageBus.Subscribe<InvoiceEntity>(OnContextStateChanged);

    }

    private Task OnLocationChanging(LocationChangingContext context)
    {
        // Need to check if the invoice is dirty before letting the user exit
        if (_isDirty)
        {
            context.PreventNavigation();
            this.ToastService.ShowError("You can't navigate away from an unsaved invoice.  Choose Save or Exit Without Saving.");
        }

        return Task.CompletedTask;
    }

    private void OnContextStateChanged(object? sender)
    {
        if (sender is InvoiceId id && this.InvoiceId.Equals(id))
            this.StateHasChanged();
    }

    private async Task EditAsync()
    {
        await Task.Yield();
        // var options = new ModalOptions();

        // var result = await _modalDialog.ShowAsync(typeof(InvoiceEditForm), options);
        // // wait for the modal to close

        // // If we have cancelled new invoice we need to exit back to the invoices page
        // if (result.ResultType != ModalResultType.OK && _invoice.InvoiceRecord.State == CommandState.Add)
        // {
        //     this.ToastService.ShowInfo("You exited creating the new invoice.");
        //     this.Broker.AllowExit();
        //     this.NavManager.NavigateTo($"/invoices");
        // }
    }

    private async Task SaveAsync()
    => await this.Mutor.SaveAsync();

    private async Task SaveAndExitAsync()
        => await this.Mutor.SaveAsync().ExecuteSideEffectAsync(Exit);

    private void Exit()
        => this.NavManager.NavigateTo($"/invoices");

    private Task ExitAsync()
    {
        // Normal exit.  Will be aborted by the Navigation Locker if the composite is dirty
        this.NavManager.NavigateTo($"/invoices");
        return Task.CompletedTask;
    }

    private Task ExitWithoutSavingAsync()
    {
        this.Mutor.Reset();
        this.Exit();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        this.MessageBus.UnSubscribe<InvoiceEntity>(OnContextStateChanged);
    }
}